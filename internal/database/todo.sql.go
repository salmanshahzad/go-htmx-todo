// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: todo.sql

package database

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO "todo" (name, user_id) VALUES ($1, $2) RETURNING id, name, completed, user_id
`

type CreateTodoParams struct {
	Name   string
	UserID int32
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Name, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Completed,
		&i.UserID,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM "todo" WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, name, completed, user_id FROM "todo" WHERE id = $1
`

func (q *Queries) GetTodoById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Completed,
		&i.UserID,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, name, completed, user_id FROM "todo" WHERE user_id = $1 ORDER BY id
`

func (q *Queries) GetTodos(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Completed,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoCompleted = `-- name: UpdateTodoCompleted :one
UPDATE "todo" SET completed = $2 WHERE id = $1 RETURNING id, name, completed, user_id
`

type UpdateTodoCompletedParams struct {
	ID        int32
	Completed bool
}

func (q *Queries) UpdateTodoCompleted(ctx context.Context, arg UpdateTodoCompletedParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoCompleted, arg.ID, arg.Completed)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Completed,
		&i.UserID,
	)
	return i, err
}

const updateTodoName = `-- name: UpdateTodoName :one
UPDATE "todo" SET name = $2 WHERE id = $1 RETURNING id, name, completed, user_id
`

type UpdateTodoNameParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateTodoName(ctx context.Context, arg UpdateTodoNameParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoName, arg.ID, arg.Name)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Completed,
		&i.UserID,
	)
	return i, err
}
